<?php

/**
 * @file
 * Implemented hooks for EME_MODULE_NAME module.
 */

use Drupal\Core\Extension\InfoParserInterface;

/**
 * Implements hook_migration_plugins_alter().
 */
function EME_MODULE_MACHINENAME_migration_plugins_alter(&$definitions) {
  $infoparser = \Drupal::service('info_parser');
  assert($infoparser instanceof InfoParserInterface);
  $parsed_info = $infoparser->parse(implode(DIRECTORY_SEPARATOR, [
    __DIR__,
    basename(__FILE__, '.module') . '.info.yml',
  ]));

  // Update source references in our migrations.
  foreach ($parsed_info['eme_settings']['migrations'] ?? [] as $plugin_id) {
    // Set constant for file migration.
    $definitions[$plugin_id]['source']['constants']['eme_file_path'] = implode(DIRECTORY_SEPARATOR, [
      dirname(__FILE__),
      'EME_FILE_ASSETS_SUBDIR',
    ]);

    // Set the real path to the data source assets.
    if (!empty($definitions[$plugin_id]['source']['urls'])) {
      $source_urls = $definitions[$plugin_id]['source']['urls'];
      assert(is_array($source_urls));
      foreach ($source_urls as $key => $source_url) {
        assert(is_string($source_url));
        $definitions[$plugin_id]['source']['urls'][$key] = str_replace(
          '..',
          dirname(__FILE__),
          $source_url
        );
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function EME_MODULE_MACHINENAME_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, ['entity_update', 'entity_presave', 'entity_insert'])) {
    unset($implementations['content_moderation']);
  }
}
